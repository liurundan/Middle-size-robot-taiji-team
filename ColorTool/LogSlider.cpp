/*
|==============================================================================
| Copyright (C) 2003 Prosilica.  All Rights Reserved.  Reproduction or
| disclosure of this file or its contents without the prior written consent of
| Prosilica is prohibited.
|==============================================================================
|
| File:			LogSlider.cpp
|
| Project/lib:	Prosilica DCAM SDK example code - viewer
|
| Target:		Win32
|
| Description:	
|
| Notes:		Originally generated by MFC app wizard.
|
|==============================================================================
| dd/mon/yy  Author		Notes
|------------------------------------------------------------------------------
| 27/Oct/03  DLee		Original.
|==============================================================================
*/

//===== INCLUDE FILES =========================================================

#include "stdafx.h"
#include "LogSlider.h"
#include <math.h>

//===== #DEFINES ==============================================================

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

//===== TYPE DEFINITIONS ======================================================

//===== FUNCTION PROTOTYPES ===================================================

//===== DATA (PUBLIC) =========================================================

//===== DATA (PRIVATE) ========================================================

//===== IMPLEMENTATION ========================================================


CLogSlider::CLogSlider()
{
}


CLogSlider::~CLogSlider()
{
}


BEGIN_MESSAGE_MAP(CLogSlider, CSliderCtrl)
	//{{AFX_MSG_MAP(CLogSlider)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


BOOL CLogSlider::Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName,
						DWORD dwStyle, const RECT& rect, CWnd* pParentWnd,
						UINT nID, CCreateContext* pContext) 
{
	BOOL result = CWnd::Create(lpszClassName, lpszWindowName, dwStyle, rect,
							   pParentWnd, nID, pContext);


	SetRange(1000, 4000);
	SetPos(1000);

	SetLineSize(1000);		// Line size: 2x
	SetPageSize(3322);		// Page size: 10x

	return result;
}


void CLogSlider::PreSubclassWindow() 
{
	CSliderCtrl::PreSubclassWindow();

	SetLineSize(1000);		// Line size: 2x
	SetPageSize(3322);		// Page size: 10x
}


int CLogSlider::GetPos() const
{
	const int			pos = CSliderCtrl::GetPos();
	int					result;
	

	result = (int) pow(2, (double)pos / 1000.0F);

	if (result < m_rangeMin)
		result = m_rangeMin;

	if (result > m_rangeMax)
		result = m_rangeMax;

	return result;
}


void CLogSlider::SetPos(int nPos)
{
	CSliderCtrl::SetPos((int)(calcLogPos(nPos) + 0.5F));
}


void CLogSlider::GetRange(int& nMin, int& nMax) const
{
	nMin = GetRangeMin();
	nMax = GetRangeMax();
}


int CLogSlider::GetRangeMin() const
{
	return m_rangeMin;
}


int CLogSlider::GetRangeMax() const
{
	return m_rangeMax;
}


void CLogSlider::SetRange(int nMin, int nMax, BOOL bRedraw)
{
	SetRangeMin(nMin, bRedraw);
	SetRangeMax(nMax, bRedraw);
}


void CLogSlider::SetRangeMin(int nMin, BOOL bRedraw)
{
	m_rangeMin = nMin;

	CSliderCtrl::SetRangeMin((int)floor(calcLogPos(nMin)), bRedraw);
}


void CLogSlider::SetRangeMax(int nMax, BOOL bRedraw)
{
	m_rangeMax = nMax;

	CSliderCtrl::SetRangeMax((int)ceil(calcLogPos(nMax)), bRedraw);
}


double CLogSlider::calcLogPos(int nPos)
{
	static const double LOG_2 = log(2);

	return log((double)nPos) / LOG_2 * 1000.0F;
}

